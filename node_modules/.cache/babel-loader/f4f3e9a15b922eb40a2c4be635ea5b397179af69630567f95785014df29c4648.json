{"ast":null,"code":"var maskMain = function (value, maskGenerator) {\n  var _a, _b;\n  value = value.toString();\n  var rules = maskGenerator.rules;\n  var mask = maskGenerator.generateMask(value);\n  var transform = maskGenerator.transform;\n  var len = value.length;\n  var maskLen = mask.length;\n  var pos = 0;\n  var newValue = '';\n  for (var i = 0; i < Math.min(len, maskLen); i++) {\n    var maskChar = mask.charAt(i);\n    var newChar = value.charAt(pos);\n    var regex = rules.get(maskChar);\n    if (regex) {\n      pos++;\n      if (regex.test(newChar)) {\n        newValue += newChar;\n      } else {\n        i--;\n        len--;\n      }\n    } else {\n      if (maskChar === newChar) {\n        pos++;\n      } else {\n        len++;\n      }\n      newValue += maskChar;\n    }\n  }\n  var transformOffset = 0;\n  if (transform) {\n    var beforeTransform = newValue;\n    newValue = transform(beforeTransform);\n    transformOffset = ((_a = newValue === null || newValue === void 0 ? void 0 : newValue.length) !== null && _a !== void 0 ? _a : 0) - ((_b = beforeTransform === null || beforeTransform === void 0 ? void 0 : beforeTransform.length) !== null && _b !== void 0 ? _b : 0);\n  }\n  return {\n    maskedValue: newValue,\n    mask: mask,\n    transformOffset: transformOffset\n  };\n};\nvar mask = function (value, maskGenerator) {\n  var _a = maskMain(value, maskGenerator),\n    maskedValue = _a.maskedValue,\n    mask = _a.mask,\n    transformOffset = _a.transformOffset;\n  var _b = maskMain(maskedValue !== null && maskedValue !== void 0 ? maskedValue : '', maskGenerator),\n    shouldBeTheSame = _b.maskedValue,\n    newMask = _b.mask;\n  if (maskedValue !== shouldBeTheSame) {\n    if (typeof console !== 'undefined') {\n      console === null || console === void 0 ? void 0 : console.error('mask applied to value should not change when applied again', '-> before: ' + value, '-> after: ' + maskedValue + ' (mask: ' + mask + ')', '-> again: ' + shouldBeTheSame + ' (mask: ' + newMask + ')');\n    }\n    return {\n      maskedValue: value,\n      mask: mask,\n      transformOffset: 0\n    };\n  }\n  return {\n    maskedValue: maskedValue,\n    mask: mask,\n    transformOffset: transformOffset\n  };\n};\nvar unmask = function (displayValue, maskGenerator) {\n  var _a;\n  if (!maskGenerator) {\n    return displayValue;\n  }\n  var rules = maskGenerator.rules;\n  var mask = maskGenerator.generateMask(displayValue);\n  var maskLen = (_a = mask === null || mask === void 0 ? void 0 : mask.length) !== null && _a !== void 0 ? _a : 0;\n  return displayValue.split('').filter(function (_, idx) {\n    return idx < maskLen && rules.has(mask[idx]);\n  }).join('');\n};\nvar processValue = function (displayValue, maskGenerator) {\n  var keepMask = maskGenerator.keepMask;\n  var value = keepMask ? displayValue : unmask(displayValue, maskGenerator);\n  return value;\n};\n// Algorithm to get the cursor position after the mask is applied\nexport var getExpectedCursorPos = function (args) {\n  var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1;\n  var displayValue = args.displayValue,\n    oldDisplayValue = args.oldDisplayValue,\n    valueBeforeMask = args.valueBeforeMask,\n    newMask = args.newMask,\n    oldMask = args.oldMask,\n    cursorPosition = args.cursorPosition,\n    lastWentBack = args.lastWentBack;\n  var oldMaskStr = (_a = oldMask === null || oldMask === void 0 ? void 0 : oldMask.generateMask(oldDisplayValue)) !== null && _a !== void 0 ? _a : '';\n  var newMaskStr = (_b = newMask === null || newMask === void 0 ? void 0 : newMask.generateMask(displayValue)) !== null && _b !== void 0 ? _b : '';\n  var oldDynamicAmount = oldMaskStr.split('').filter(function (char, idx) {\n    return (oldDisplayValue === null || oldDisplayValue === void 0 ? void 0 : oldDisplayValue[idx]) && (oldMask ? oldMask.rules.has(char) : true);\n  }).length;\n  var newDynamicAmount = newMaskStr.split('').filter(function (char, idx) {\n    return (displayValue === null || displayValue === void 0 ? void 0 : displayValue[idx]) && (newMask ? newMask.rules.has(char) : true);\n  }).length;\n  if (oldDynamicAmount === newDynamicAmount && displayValue === oldDisplayValue) {\n    var afterMaskLen = (_c = displayValue === null || displayValue === void 0 ? void 0 : displayValue.length) !== null && _c !== void 0 ? _c : 0;\n    var beforeMaskLen = (_d = valueBeforeMask === null || valueBeforeMask === void 0 ? void 0 : valueBeforeMask.length) !== null && _d !== void 0 ? _d : 0;\n    if (afterMaskLen > beforeMaskLen) {\n      // When the new value before the mask was applied had less chars,\n      // consider to be a case in which a char was deleted.\n      // Because it's not known if it was deleted before or after the cursor\n      // (the cursor position before the change is unknown), the flag lastWentBack\n      // is used to consider if the cursor was before or after the deleted char.\n      var position = cursorPosition + afterMaskLen - beforeMaskLen;\n      var goOn = true;\n      var wentBack = !lastWentBack;\n      var offset = 0;\n      // advance the adjacent static chars until there's no more remaining\n      // if wentBack is true, it will go back until it finds a dynamic char\n      // if wentBack is false, it will go forward until it finds a dynamic char\n      while (goOn) {\n        var idx = position + offset + (wentBack ? -1 : 0);\n        var maskChar = idx >= 0 && idx < ((_e = newMaskStr === null || newMaskStr === void 0 ? void 0 : newMaskStr.length) !== null && _e !== void 0 ? _e : 0) ? newMaskStr === null || newMaskStr === void 0 ? void 0 : newMaskStr.charAt(idx) : undefined;\n        if (!maskChar) {\n          goOn = false;\n        } else {\n          var regex = (_f = newMask === null || newMask === void 0 ? void 0 : newMask.rules) === null || _f === void 0 ? void 0 : _f.get(maskChar);\n          if (regex) {\n            goOn = false;\n          } else {\n            offset = wentBack ? offset - 1 : offset + 1;\n          }\n        }\n      }\n      var newPosition = Math.max(Math.min(position + offset, (_g = displayValue === null || displayValue === void 0 ? void 0 : displayValue.length) !== null && _g !== void 0 ? _g : 0), 0);\n      return {\n        position: newPosition,\n        wentBack: wentBack\n      };\n    } else if (afterMaskLen < beforeMaskLen) {\n      // If 1 or more chars were added, but the end value ended up\n      // being the same after the mask was applied, the cursor should\n      // return a number of positions equal to the number of ignored\n      // chars (those that should have been placed in dynamic positions,\n      // but the rule wasn't satisfied).\n      var initial = {\n        ignored: 0,\n        idx: 0\n      };\n      var ignored = ((_m = (_l = (_k = valueBeforeMask === null || valueBeforeMask === void 0 ? void 0 : valueBeforeMask.substring(0, Math.min((_h = valueBeforeMask === null || valueBeforeMask === void 0 ? void 0 : valueBeforeMask.length) !== null && _h !== void 0 ? _h : 0, (_j = newMaskStr === null || newMaskStr === void 0 ? void 0 : newMaskStr.length) !== null && _j !== void 0 ? _j : 0, cursorPosition))) === null || _k === void 0 ? void 0 : _k.split('')) === null || _l === void 0 ? void 0 : _l.reduce(function (acc, char) {\n        var _a, _b;\n        var ignored = acc.ignored;\n        var idx = acc.idx;\n        var len = (_a = newMaskStr === null || newMaskStr === void 0 ? void 0 : newMaskStr.length) !== null && _a !== void 0 ? _a : 0;\n        while (idx < len) {\n          if (idx >= cursorPosition) {\n            return acc;\n          }\n          var maskChar = newMaskStr === null || newMaskStr === void 0 ? void 0 : newMaskStr.charAt(idx);\n          var regex = (_b = newMask === null || newMask === void 0 ? void 0 : newMask.rules) === null || _b === void 0 ? void 0 : _b.get(maskChar);\n          if (regex) {\n            if (regex.test(char)) {\n              return {\n                ignored: ignored,\n                idx: idx + 1\n              };\n            } else {\n              return {\n                ignored: ignored + 1,\n                idx: idx\n              };\n            }\n          } else {\n            if (maskChar === char) {\n              return {\n                ignored: ignored,\n                idx: idx + 1\n              };\n            }\n            idx++;\n          }\n        }\n        return {\n          ignored: ignored,\n          idx: idx + 1\n        };\n      }, initial)) !== null && _m !== void 0 ? _m : initial).ignored;\n      var newPosition = Math.max(Math.min(cursorPosition - ignored, (_o = displayValue === null || displayValue === void 0 ? void 0 : displayValue.length) !== null && _o !== void 0 ? _o : 0), 0);\n      return {\n        position: newPosition,\n        wentBack: lastWentBack\n      };\n    } else {\n      return {\n        position: cursorPosition,\n        wentBack: lastWentBack\n      };\n    }\n  } else if (oldDynamicAmount <= newDynamicAmount) {\n    var dynamicOffset = newDynamicAmount - oldDynamicAmount;\n    // Guess the last position of the cursor\n    var cursorBeforeDynamic_1 = Math.max(Math.min(cursorPosition - dynamicOffset, (_p = oldDisplayValue === null || oldDisplayValue === void 0 ? void 0 : oldDisplayValue.length) !== null && _p !== void 0 ? _p : 0), 0);\n    var oldStaticAmountBefore = oldMaskStr === null || oldMaskStr === void 0 ? void 0 : oldMaskStr.substring(0, Math.max(cursorBeforeDynamic_1, 0)).split('').filter(function (char, idx) {\n      return (oldDisplayValue === null || oldDisplayValue === void 0 ? void 0 : oldDisplayValue[idx]) && (oldMask ? !oldMask.rules.has(char) : false);\n    }).length;\n    var newStaticAmountBefore = newMaskStr === null || newMaskStr === void 0 ? void 0 : newMaskStr.substring(0, Math.max(cursorBeforeDynamic_1, 0)).split('').filter(function (char, idx) {\n      return (displayValue === null || displayValue === void 0 ? void 0 : displayValue[idx]) && (newMask ? !newMask.rules.has(char) : false);\n    }).length;\n    // the difference of static chars between the new and old mask, before the cursor\n    // and not considering the cursor changes due to dynamic chars\n    var initialStaticOffset_1 = newStaticAmountBefore - oldStaticAmountBefore;\n    var exceededOffset_1 = Math.max(((_q = valueBeforeMask === null || valueBeforeMask === void 0 ? void 0 : valueBeforeMask.length) !== null && _q !== void 0 ? _q : 0) - ((_r = displayValue === null || displayValue === void 0 ? void 0 : displayValue.length) !== null && _r !== void 0 ? _r : 0), 0);\n    // Calculates the number of ignored chars (those that have not satisfied the mask)\n    // and the number of exceeded chars (those that have not been added to the mask,\n    // because the end of the mask was reached)\n    var initial = {\n      ignored: 0,\n      exceeded: 0,\n      staticAdded: 0,\n      idx: 0\n    };\n    var _2 = (_t = (_s = valueBeforeMask === null || valueBeforeMask === void 0 ? void 0 : valueBeforeMask.split('')) === null || _s === void 0 ? void 0 : _s.reduce(function (_a, char) {\n        var _b, _c;\n        var ignored = _a.ignored,\n          exceeded = _a.exceeded,\n          staticAdded = _a.staticAdded,\n          idx = _a.idx;\n        var len = (_b = newMaskStr === null || newMaskStr === void 0 ? void 0 : newMaskStr.length) !== null && _b !== void 0 ? _b : 0;\n        while (idx < len) {\n          var maskChar = newMaskStr === null || newMaskStr === void 0 ? void 0 : newMaskStr.charAt(idx);\n          var regex = (_c = newMask === null || newMask === void 0 ? void 0 : newMask.rules) === null || _c === void 0 ? void 0 : _c.get(maskChar);\n          if (regex) {\n            if (regex.test(char)) {\n              return {\n                ignored: ignored,\n                exceeded: exceeded,\n                staticAdded: staticAdded,\n                idx: idx + 1\n              };\n            } else {\n              var newIgnored = idx > cursorBeforeDynamic_1 + initialStaticOffset_1 - exceededOffset_1 && idx < cursorPosition ? ignored + 1 : ignored;\n              return {\n                ignored: newIgnored,\n                exceeded: exceeded,\n                staticAdded: !newIgnored && idx < cursorPosition ? staticAdded - 1 : staticAdded,\n                idx: idx\n              };\n            }\n          } else {\n            if (maskChar === char) {\n              var newIgnored = idx > cursorBeforeDynamic_1 + initialStaticOffset_1 - exceededOffset_1 && idx < cursorPosition ? ignored + 1 : ignored;\n              return {\n                ignored: newIgnored,\n                exceeded: exceeded,\n                staticAdded: staticAdded,\n                idx: idx + 1\n              };\n            } else {\n              if (idx < cursorPosition) {\n                staticAdded = staticAdded + 1;\n              }\n            }\n            idx++;\n          }\n        }\n        // after the entire masked was surpassed, increase the exceeded chars amount\n        return {\n          ignored: ignored,\n          exceeded: exceeded + 1,\n          staticAdded: staticAdded,\n          idx: idx + 1\n        };\n      }, initial)) !== null && _t !== void 0 ? _t : initial,\n      _3 = _2.ignored,\n      charsIgnored = _3 === void 0 ? 0 : _3,\n      _4 = _2.exceeded,\n      charsExceeded = _4 === void 0 ? 0 : _4,\n      _5 = _2.staticAdded,\n      staticAdded = _5 === void 0 ? 0 : _5;\n    var currentPos = cursorBeforeDynamic_1;\n    var staticOffset = initialStaticOffset_1;\n    // calculates the number of static chars that were added to the value,\n    // starting from the expected last position of the cursor\n    while (currentPos - staticOffset - charsExceeded < cursorBeforeDynamic_1 + dynamicOffset) {\n      var idx = currentPos - charsExceeded;\n      if (idx < 0) {\n        currentPos++;\n        continue;\n      }\n      var char = newMaskStr === null || newMaskStr === void 0 ? void 0 : newMaskStr[idx];\n      if (!char) {\n        break;\n      }\n      var dynamic = newMask ? newMask.rules.has(char) : true;\n      if (!dynamic) {\n        staticOffset++;\n      }\n      currentPos++;\n    }\n    staticOffset = Math.max(staticAdded, staticOffset, 0);\n    return {\n      position: Math.min(cursorPosition + staticOffset - charsIgnored, (_u = newMaskStr === null || newMaskStr === void 0 ? void 0 : newMaskStr.length) !== null && _u !== void 0 ? _u : 0),\n      wentBack: lastWentBack\n    };\n  } else {\n    // If a new static char is added to the display value, not present before the mask was applied,\n    // the cursor position should be moved to the right.\n    // If a char is removed from the display value, because it was supposed to be dynamic,\n    // but have not satisfied the condition, the cursor position should be moved to the left.\n    var offset = (_y = (_x = (_w = valueBeforeMask === null || valueBeforeMask === void 0 ? void 0 : valueBeforeMask.substring(0, Math.min(cursorPosition, (_v = valueBeforeMask === null || valueBeforeMask === void 0 ? void 0 : valueBeforeMask.length) !== null && _v !== void 0 ? _v : 0))) === null || _w === void 0 ? void 0 : _w.split('')) === null || _x === void 0 ? void 0 : _x.reduce(function (acc, char, idx) {\n      var _a;\n      var maskChar = newMaskStr === null || newMaskStr === void 0 ? void 0 : newMaskStr[idx];\n      var regex = (_a = newMask === null || newMask === void 0 ? void 0 : newMask.rules) === null || _a === void 0 ? void 0 : _a.get(maskChar);\n      if (regex) {\n        if (regex.test(char)) {\n          return acc;\n        } else {\n          return acc - 1;\n        }\n      } else {\n        if (maskChar === char) {\n          return acc;\n        } else {\n          return acc + 1;\n        }\n      }\n    }, 0)) !== null && _y !== void 0 ? _y : 0;\n    // Consider the dynamic chars added when the mask was applied\n    // (due to a call to transform). In this case, the cursor position should\n    // be moved to the right according to the number of dynamic chars added.\n    var initial = {\n      dynamic: 0,\n      idx: 0\n    };\n    var dynamic = ((_0 = (_z = valueBeforeMask === null || valueBeforeMask === void 0 ? void 0 : valueBeforeMask.split('')) === null || _z === void 0 ? void 0 : _z.reduce(function (acc, char) {\n      var _a, _b;\n      var dynamic = acc.dynamic;\n      var idx = acc.idx;\n      var len = (_a = newMaskStr === null || newMaskStr === void 0 ? void 0 : newMaskStr.length) !== null && _a !== void 0 ? _a : 0;\n      while (idx < len) {\n        var maskChar = newMaskStr === null || newMaskStr === void 0 ? void 0 : newMaskStr[idx];\n        var regex = (_b = newMask === null || newMask === void 0 ? void 0 : newMask.rules) === null || _b === void 0 ? void 0 : _b.get(maskChar);\n        if (regex) {\n          if (regex.test(char)) {\n            return {\n              dynamic: dynamic + 1,\n              idx: idx + 1\n            };\n          } else {\n            return acc;\n          }\n        } else {\n          if (maskChar === char) {\n            return {\n              dynamic: dynamic,\n              idx: idx + 1\n            };\n          }\n          idx++;\n        }\n      }\n      return acc;\n    }, initial)) !== null && _0 !== void 0 ? _0 : initial).dynamic;\n    var dynamicOffset = Math.max(newDynamicAmount - dynamic, 0);\n    var position = Math.max(Math.min(cursorPosition + offset + dynamicOffset, (_1 = displayValue === null || displayValue === void 0 ? void 0 : displayValue.length) !== null && _1 !== void 0 ? _1 : 0), 0);\n    return {\n      position: position,\n      wentBack: lastWentBack\n    };\n  }\n};\nvar MaskFunctions = {\n  getExpectedCursorPos: getExpectedCursorPos,\n  mask: mask,\n  processValue: processValue,\n  unmask: unmask\n};\nexport default MaskFunctions;","map":{"version":3,"names":["maskMain","value","maskGenerator","toString","rules","mask","generateMask","transform","len","length","maskLen","pos","newValue","i","Math","min","maskChar","charAt","newChar","regex","get","test","transformOffset","beforeTransform","_a","_b","maskedValue","shouldBeTheSame","newMask","console","error","unmask","displayValue","split","filter","_","idx","has","join","processValue","keepMask","getExpectedCursorPos","args","oldDisplayValue","valueBeforeMask","oldMask","cursorPosition","lastWentBack","oldMaskStr","newMaskStr","oldDynamicAmount","char","newDynamicAmount","afterMaskLen","_c","beforeMaskLen","_d","position","goOn","wentBack","offset","_e","undefined","_f","newPosition","max","_g","initial","ignored","_m","_l","_k","substring","_h","_j","reduce","acc","_o","dynamicOffset","cursorBeforeDynamic_1","_p","oldStaticAmountBefore","newStaticAmountBefore","initialStaticOffset_1","exceededOffset_1","_q","_r","exceeded","staticAdded","_2","_t","_s","newIgnored","_3","charsIgnored","_4","charsExceeded","_5","currentPos","staticOffset","dynamic","_u","_y","_x","_w","_v","_0","_z","_1","MaskFunctions"],"sources":["../../../src/utils/mask.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}